{"version":3,"sources":["components/Statistics/Statistics.js","components/FeedbackOptions/FeedbackOptions.js","components/Notification/Notification.js","components/Feedback/Feedback.js","App/App.js","index.js"],"names":["Statistics","good","neutral","bad","total","positivePercentage","FeedbackOptions","onLeaveFeedback","options","map","option","className","onClick","toLowerCase","type","Notification","message","Feedback","title","useState","setGood","setNeutral","setBad","countTotalFeedback","key","prevState","positiveFeedbackPercentage","Math","round","countPositiveFeedbackPercentage","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oPAGe,SAASA,EAAT,GAMX,IAAD,IALDC,YAKC,MALM,EAKN,MAJDC,eAIC,MAJS,EAIT,MAHDC,WAGC,MAHK,EAGL,MAFDC,aAEC,MAFO,EAEP,MADDC,0BACC,MADoB,EACpB,EACD,OACE,gCACE,4CACA,+BACE,wCAAWJ,KACX,2CAAcC,KACd,uCAAUC,KACV,yCAAYC,KACZ,qDAAwBC,EAAxB,aCfO,SAASC,EAAT,GAGX,IAFFC,EAEC,EAFDA,gBAEC,IADDC,eACC,MADS,CAAC,OAAQ,UAAW,OAC7B,EACD,OACE,8BACGA,EAAQC,KAAI,SAAAC,GACX,OACE,wBAEEC,UAAU,SACVC,QAAS,kBAAML,EAAgBG,EAAOG,gBACtCC,KAAK,SAJP,SAMGJ,GALIA,QCTF,SAASK,EAAT,GAAoD,IAAD,IAA3BC,eAA2B,MAAjB,cAAiB,EAChE,OAAO,4BAAIA,IC2DEC,MAxDf,YAAsD,IAAD,IAAlCC,aAAkC,MAA5B,0BAA4B,EAEnD,EAAwBC,mBAAS,GAAjC,mBAAOlB,EAAP,KAAamB,EAAb,KACA,EAA8BD,mBAAS,GAAvC,mBAAOjB,EAAP,KAAgBmB,EAAhB,KACA,EAAsBF,mBAAS,GAA/B,mBAAOhB,EAAP,KAAYmB,EAAZ,KAcMC,EAAqB,WACzB,OAAOtB,EAAOC,EAAUC,GAaxB,OACE,gCACE,6BAAKe,IAEL,cAACZ,EAAD,CACEE,QAAS,CAAC,OAAQ,UAAW,OAC7BD,gBAhCgB,SAAAiB,GACV,SAARA,GACFJ,GAAQ,SAAAK,GAAS,OAAIA,EAAY,KAEvB,YAARD,GACFH,GAAW,SAAAI,GAAS,OAAIA,EAAY,KAE1B,QAARD,GACFF,GAAO,SAAAG,GAAS,OAAIA,EAAY,QA2BJ,IAAzBF,IACC,cAACvB,EAAD,CACEC,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOmB,IACPlB,mBAzB8B,WACtC,IAAIqB,EAA6B,EAMjC,OALa,IAATzB,IACFyB,EAA6BC,KAAKC,MAC/B3B,EAAOsB,IAAwB,MAG7BG,EAkBqBG,KAGtB,cAACd,EAAD,CAAcC,QAAQ,0BC3CjBc,MAVf,WACE,OACE,qBAAKnB,UAAU,MAAf,SACE,wBAAQA,UAAU,aAAlB,SACE,cAAC,EAAD,CAAUO,MAAM,gCCHxBa,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,U","file":"static/js/main.52536116.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport default function Statistics({\n  good = 0,\n  neutral = 0,\n  bad = 0,\n  total = 0,\n  positivePercentage = 0,\n}) {\n  return (\n    <div>\n      <h2>Statistics</h2>\n      <ul>\n        <li>Good: {good}</li>\n        <li>Neutral: {neutral}</li>\n        <li>Bad: {bad}</li>\n        <li>Total: {total}</li>\n        <li>Positive feedback: {positivePercentage}%</li>\n      </ul>\n    </div>\n  );\n}\n\nStatistics.propTypes = {\n  good: PropTypes.number,\n  neutral: PropTypes.number,\n  bad: PropTypes.number,\n  total: PropTypes.number,\n  positivePercentage: PropTypes.number,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport default function FeedbackOptions({\n  onLeaveFeedback,\n  options = ['Good', 'Neutral', 'Bad'],\n}) {\n  return (\n    <div>\n      {options.map(option => {\n        return (\n          <button\n            key={option}\n            className=\"button\"\n            onClick={() => onLeaveFeedback(option.toLowerCase())}\n            type=\"button\"\n          >\n            {option}\n          </button>\n        );\n      })}\n    </div>\n  );\n}\n\nFeedbackOptions.propTypes = {\n  onLeaveFeedback: PropTypes.func,\n  options: PropTypes.arrayOf(PropTypes.string),\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport default function Notification({ message = 'No feedback' }) {\n  return <p>{message}</p>;\n}\n\nNotification.propTypes = {\n  message: PropTypes.string,\n};\n","import React from 'react';\nimport Statistics from '../Statistics';\nimport FeedbackOptions from '../FeedbackOptions';\nimport Notification from '../Notification';\nimport PropTypes from 'prop-types';\nimport {useState} from 'react'\n\nfunction Feedback({title='this is a feedback form'}) {\n\n  const [good, setGood] = useState(0)\n  const [neutral, setNeutral] = useState(0)\n  const [bad, setBad] = useState(0)\n\n  const onLeaveFeedback = key => {\n    if (key === \"good\") {\n      setGood(prevState => prevState + 1)\n    }\n    if (key === \"neutral\") {\n      setNeutral(prevState => prevState + 1)\n    }\n    if (key === \"bad\") {\n      setBad(prevState => prevState + 1)\n    }\n  };\n\n  const countTotalFeedback = () => {\n    return good + neutral + bad;\n  };\n\n  const countPositiveFeedbackPercentage = () => {\n    let positiveFeedbackPercentage = 0;\n    if (good !== 0) {\n      positiveFeedbackPercentage = Math.round(\n        (good / countTotalFeedback()) * 100,\n      );\n    }\n    return positiveFeedbackPercentage;\n  };\n\n    return (\n      <div>\n        <h2>{title}</h2>\n\n        <FeedbackOptions\n          options={['Good', 'Neutral', 'Bad']}\n          onLeaveFeedback={onLeaveFeedback}\n        />\n\n        {countTotalFeedback() !== 0 ? (\n          <Statistics\n            good={good}\n            neutral={neutral}\n            bad={bad}\n            total={countTotalFeedback()}\n            positivePercentage={countPositiveFeedbackPercentage()}\n          />\n        ) : (\n          <Notification message=\"No feedback given\" />\n        )}\n      </div>\n    );\n}\n\nexport default Feedback;\n\nFeedback.propTypes = {\n  title: PropTypes.string,\n};\n","import React from 'react';\nimport './App.css';\nimport Feedback from '../components/Feedback';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Feedback title=\"Please, leave feedback\" />\n      </header>\n    </div>\n  )\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}